temporary notes..

----------------------------------------------------------------------

    should we put all 'global' gui resources in SAT_Global.GUI,
    and have some lazy creation stuff there? (refcount?)

    x11:
        separate display connection per window
        glx needs display and targe drawable

    win32:
        window needs (global) WNDCLASS, created from global HINSTANCE (from DllMain)
        surface needs dc (can get it from screen using nullptr)
        painter wands dc (from hwnd)
        wgl needs hwnd, and dc (created from hwnd)

    nanovg
        context is 'global'
        nanovg surface & painter needs context

        (github: "At first I used a separate NanoVG context and GLFW context per window.
        However, this leads to weird difficulties down the road. I ended up using shared context")

    cairo surface
        win32: dc
        xcb: connection, drawable, visual
        xrender: conection, screen, drawable, xrender pictformat

    so.. everything except nanovg is per window..
    (maybe opengl context too)

----------------------------------------------------------------------
drawing
----------------------------------------------------------------------

window.do_widget_redraw()
    check backwards in the widet hierarchy (upwards, parent), until we are sure
    no other widgest will be visible through the rect

all painting should consider the update_rect AND the clip-rect..
no point wasting time drawing things that will not bs visible

update_rect is the rect received from os/system in EXPOSE/WM_PAINT,
the part of the window needing repainting..
which we will blit after finished drawing..

clip_rect is updeated recursively as we go in and out o widget hierarchies during drawing..
widgets can call painter->getClipRect to find current clip-rect,
and just don't draw things outside of this, or adjust their drawing coords..
it will be clipped away, so don't waste time painting it..

LAYOUT

we could set flags during alignment, so we don't need to check things during painting:
- isRecursivelyVisible
- isRecursivelyOpaque
also:
- isRecursivelyActive
- isRecursivelyEnabled

if diaabled, the widgets should be blended towards the background color..
how does the widgets get this color?
